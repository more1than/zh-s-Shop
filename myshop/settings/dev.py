# 开发环境配置文件
"""
Django settings for myshop project.

Generated by 'django-admin startproject' using Django 4.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full liawdast of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import datetime
import os.path
import sys
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
sys.path.insert(0, os.path.join(BASE_DIR, "apps"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-)-%uk_oh@@ne!6lp@dr#$5@b=co9ej9$!%^19omqlxl8d593=^'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# 允许哪些域名访问django
ALLOWED_HOSTS = ["127.0.0.1", "localhost"]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # "ckeditor",  # 富文本编辑器
    # "ckeditor_uploader",  # 富文本编辑器上传图片模块
    'rest_framework',  # DRF
    "corsheaders",  # cors跨域
    # 'django_crontab',  # 定时器模块
    "haystack",  # 搜索模块

    "users.apps.UsersConfig",  # 用户认证模块
    "verifications.apps.VerificationsConfig",  # 短信模块
    "oauth.apps.OauthConfig",  # QQ模块
    "areas.apps.AreasConfig",  # 省市区
    "goods.apps.GoodsConfig",  # 商品模块
    "contents.apps.ContentsConfig",  # 广告模块
    "orders.apps.OrdersConfig",  # 订单模块
    "payment.apps.PaymentConfig",  # 支付模块
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",  # 跨域中间件放在最上面，最先调用
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'myshop.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'myshop.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'my_shop',
        'HOST': "127.0.0.1",
        'PORT': 3306,
        'USER': 'zhanghao',
        'PASSWORD': 'zhanghao'
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# 配置redis数据库作为缓存后端
CACHES = {
    "default": {  # 缓存业务
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/0",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    "session": {  # 缓存session
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    "verify_codes": {  # 缓存验证码
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/2",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    "history": {  # 存储商品浏览记录
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/3",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
    "cart": {  # 存储登录用户购物车数据
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/4",
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        }
    },
}
SESSION_ENGINE = "django.contrib.sessions.backends.cache"
SESSION_CACHE_ALIAS = "session"

# 日志
LOGGING = {
    'version': 1,
    "disable_existing_loggers": False,  # 是否禁用已存在的日志器
    "formatters": {  # 日志信息显示的格式
        "verbose": {
            "format": "%(levelname)s %(asctime)s %(module)s %(lineno)d %(message)s"
        },
        "simple": {
            "format": "%(levelname)s %(module)s %(lineno)d %(message)s"
        },
    },
    "filters": {  # 对日志进行过滤
        "require_debug_true": {  # django在debug模式才输出日志
            "()": "django.utils.log.RequireDebugTrue",
        },
    },
    "handlers": {  # 日志处理方法
        "console": {  # 向终端中输出日志
            "level": "INFO",
            "filters": ["require_debug_true"],  # 项目上线后便不会过滤debug级别
            "class": "logging.StreamHandler",
            "formatter": "simple"
        },
        "file": {  # 向文件中输出日志
            "level": "INFO",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": os.path.join(os.path.dirname(BASE_DIR), "log/my_shop.log"),  # 日志文件的位置
            "maxBytes": 300 * 1024 * 1024,
            "backupCount": 10,
            "formatter": "verbose",
        }
    },
    "loggers": {  # 日志器
        "django": {  # 定义了一个名为django的日志器
            "handlers": ["console", "file"],  # 可以同时像终端和文件中输出日志
            "propagate": True,  # 是否继续传递日志信息
            "level": "INFO",
        },
    },
}

# DRF配置项
REST_FRAMEWORK = {
    # 异常处理
    "EXCEPTION_HANDLER": "myshop.utils.exceptions.exception_handler",

    # 认证
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_jwt.authentication.JSONWebTokenAuthentication",  # JWT认证类放在第一位是默认项
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.BasicAuthentication",
    ),

    # 分页
    "DEFAULT_PAGINATION_CLASS": "myshop.utils.pagination.StandardResultsSetPagination",
}

# 修改django认证系统的用户模型类
AUTH_USER_MODEL = "users.User"

# 追加跨域白名单
CORS_ORIGIN_WHITELIST = (
    "https://127.0.0.1:8080",
    "https://localhost:8080",
)

CORS_ALLOW_CREDENTIALS = True  # 允许携带cookie

# JWT配置
JWT_AUTH = {
    # JWT的有效期
    "JWT_EXPIRATION_DELTA": datetime.timedelta(hours=3),

    # 修改JWT登录视图的响应数据的函数
    "JWT_RESPONSE_PAYLOAD_HANDLER": "users.utils.jwt_response_payload_handler",
}

# 修改Django用户认证类
AUTHENTICATION_BACKENDS = ["users.utils.UsernameMobileAuthBackend"]

# 登录参数
QQ_CLIENT_ID = "xxx"
QQ_CLIENT_SECRET = "xxx"
QQ_REDIRECT_URL = "xxx"

# 邮件配置
EMAIL_BACKEND = "django.core.mail.backends.stmp.EmailBackend"
EMAIL_HOST = "stmp.163.com"
EMAIL_PORT = 25
# 发送邮件的邮箱
EMAIL_HOST_USER = "itcast99@163.com"
# 在邮箱中设置的客户端授权码
EMAIL_HOST_PASSWORD = "python99"
# 收件人看到的发件人
EMAIL_FROM = 'python<itcast99@163.com>'

# DRF扩展 配置省市区数据缓存
REST_FRAMEWORK_EXTENSIONS = {
    # 缓存时间
    "DEFAULT_CACHE_RESPONSE_TIMEOUT": 60 * 60,
    # 缓存存储
    "DEFAULT_USE_CACHE": "default",
}

# FastDFS
FDFS_BASE_URL = "http://192.168.1.1:8888/"
FDFS_CLIENT_CONF = os.path.join(BASE_DIR, "utils/fastdfs/client/conf")

# django文件存储
DEFAULT_FILE_STORAGE = "myshop.utils.fastdfs.fdfs_storage.FastDFSStorage"

# 富文本编辑器ckeditor
# CKEDITOR_CONFIGS = {
#     "default": {
#         "toolbar": "full",  # 工具条功能
#         "height": 300,  # 编辑器高度
#         # width: 300, # 编辑器宽度
#     }
# }

# CKEDITOR_UPLOAD_PATH = ""  # 上传图片保存路径，使用了FastDFS,所以此处设为''

# 定时任务
CRONJOBS = [
    # 每5分钟执行一次生成主页静态文件
    ("*/5 * * * *", "contents.crons.generate_static_index_html", ">> 项目绝对路径/logs/crontab.log")
]
# 解决crontab中文问题
CRONTAB_COMMAND_PREFIX = "LANG_ALL=zh_cn.UTF-8"

# 支付宝
ALIPAY_APPID = "1203012301203013"
ALIPAY_DEBUG = True
ALIPAY_URL = "https://openapi.alipaydev.com/geteway.do"

# Haystack
HAYSTACK_CONNECTIONS = {
    "default": {
        "ENGINE": "haystack.backends.elasticsearch.ElasticsearchSearchEngine",
        "URL": "http://192.168.0.0:9200",  # ip为Elasticsearch服务端IP地址，9200是Elasticsearch的默认端口号
        "INDEX_NAME": "MYSHOP",  # 指定Elasticsearch建立的索引库名称
    }
}

# 当添加，修改，删除操作时，自动生成索引
HAYSTACK_SIGNAL_PROCESSOR = "haystack.signals.RealtimeSignalProcessor"
